//Bryan Gonzalez
#include <iostream>
using namespace std;

bool ok(int cross[], int curr_box){
    static int checklist[8][5] ={ 
    {-1},
    {0,-1},
    {0,-1},
    {0,1,2,-1},
    {0,1,3,-1},
    {1,4,-1},
    {2,3,4,-1},
    {3,4,5,6,-1}
    };
   
for(int i = 0; i < curr_box; i++){
            if(cross[i] == cross[curr_box]) return false; // checks every box to see if no number is reused
        }
        
        int neighbor, i = 0;
            while(checklist[curr_box][i] != -1){ //while the checklist is not -1 it will continue to check

                neighbor = checklist[curr_box][i]; // sets neighbor equal to what ever is in the array 
                     if(abs(cross[curr_box] - cross[neighbor]) == 1 || cross[curr_box] == cross[neighbor] ){//checks if the numbers are adjacent or the same as the current box
                        return false; 
                     }
                     i++;
            }

        

   return true; 
}


void print(int cross[], int cap){
    static int counter = 1; //  static causes the number in the function to change
    cout << " Solution number: " << counter++ << endl;
    cout << " " << cross[0] << cross[1] << endl;
    cout << cross[2] << cross[3] << cross[4] << cross[5] << endl;
    cout << " " << cross[6] << cross[7] << endl << endl;
    return;
}

int main(){
int q[8] = {0}, b=0;

q[b]=1;

while(b >= 0){// if b is less then 0 the loop will break out

b++; // move to next box

if(b == 8) {// if it reaches past the last box print out and backtrack
    print(q,b); 
    b--;
    } 
    else {
q[b] = 0;
    }

while(b >= 0){ //if it can't back track no more it exits the loop and starts over

    q[b]++; //  move on to the next value for example if q[b] was 0 it would now be 1

    if(q[b] == 9){//   if the value passes 8 it will backtrack
        b--;
        } 
        else
        if(ok(q,b)){// if the function is true it will break out of this loop
            break;
            } 

}
}
return 0;
}
